version: 2.1

##########################
# Executor name definition
##########################
executors:
    linux-node14:
        machine:
            image: ubuntu-2004:202107-02
    macos-node14:
        macos:
            xcode: 12.5.1
        environment:
            TERM: xterm-256color

########################################################################################################################################################################################
# Aliases - encapsulation of lengthy logic
#
# `restore_*` aliases refer to downloading the saved cache of their respective key, if it exists
#  i.e - `restore_macos_brew_cache` will try to download the cache that holds the data installed after running `brew install gmp`
#
# `save_*` aliases refer to saving the installation data to cache
#  i.e - `save_macos_brew_cache` will save the result of installing gmp with the command `brew install gmp`
#
#
#   Available caches:
#
#   `brew-gmp-cache` is used to save/restore cache of the gmp package installation on macos
#
#   `venv_cache` is used to save/restore cache of the venv tests, which use starknet commands installed in the virtual environment `my-venv`
#
#   `cairo_cache` is used to save/restore cache of the cairo-lang package, which uses starknet commands installed in the local bin folder
#
#   `devnet_cache` is used to save/restore cache of starknet-devnet, including all its dependencies
#
#
#   key format: {cache name}-{key version}-{executor architecture}-{checksum of the dependency version}
#   Where:
#    {cache name} is a descriptive name for the cache we're saving, as described above (`brew-gmp-cache`, `venv-cache`, etc);
#    {key version} is the version of the cache configuration, i.e, if a change needs to be done to the paths for example, this version should be upped so a new key is generated for it;
#    {executor architecture} is the identifier for the architecture of each executor, which is generated by the {{ arch }} template;
#    {checksum of the dependency version} is the checksum generated with the template {{ checksum "PATH/TO/FILE" }}, where the file contains the latest version of the dependency ;
#   Exception is "brew-gmp-cache", which we do not need to verify the checksum
#
########################################################################################################################################################################################
aliases:
    - &restore_macos_brew_cache
      ######################################################
      # Try to restore only if the executor is a macos one #
      ######################################################
      - when:
            condition:
                and:
                    - equal: [macos-node14, << parameters.platform >>]
            steps:
                - restore_cache:
                      name: "Restore venv Cache"
                      key: brew-gmp-cache-v1-{{ arch }}
    - &save_macos_brew_cache
      ############################################
      # Save only if the executor is a macos one #
      ############################################
      - when:
            condition:
                and:
                    - equal: [macos-node14, << parameters.platform >>]
            steps:
                - save_cache:
                      name: "Save brew-gmp Cache"
                      key: brew-gmp-cache-v1-{{ arch }}
                      paths:
                          - /usr/local/Cellar/gmp
                          - /usr/local/include
                          - /usr/local/lib/libgmp.10.dylib
                          - /usr/local/lib/libgmp.a
                          - /usr/local/lib/libgmp.dylib
                          - /usr/local/lib/libgmpxx.4.dylib
                          - /usr/local/lib/libgmpxx.a
                          - /usr/local/lib/libgmpxx.dylib

    - &restore_venv_cache
      #############################################################
      # Try to restore only if the test name is "test-venv-tests" #
      #############################################################
      - when:
            condition:
                and:
                    - equal: [test-venv-tests, << parameters.test-name >>]
            steps:
                - restore_cache:
                      name: "Restore venv Cache"
                      key: venv-cache-{{ arch }}-v1-{{ checksum "/tmp/cairo-lang-version" }}
    - &save_venv_cache
      ###################################################
      # Save only if the test name is "test-venv-tests" #
      ###################################################
      - when:
            condition:
                and:
                    - equal: [test-venv-tests, << parameters.test-name >>]
            steps:
                - save_cache:
                      name: "Save venv Cache"
                      key: venv-cache-{{ arch }}-v1-{{ checksum "/tmp/cairo-lang-version" }}
                      paths:
                          - /Users/distiller/project/my-venv
                          - /home/circleci/project/my-venv

    - &restore_cairo_cache
      #################################################################
      # Try to restore only if the test name is not "test-venv-tests" #
      #################################################################
      - when:
            condition:
                and:
                    - not:
                          equal: [test-venv-tests, << parameters.test-name >>]
            steps:
                - restore_cache:
                      name: "Restore cairo-lang Cache"
                      key: cairo-lang-cache-{{ arch }}-v1-{{ checksum "/tmp/cairo-lang-version" }}
    - &save_cairo_cache
      ##############################################################
      # Try to save only if the test name is not "test-venv-tests" #
      ##############################################################
      - when:
            condition:
                and:
                    - not:
                          equal: [test-venv-tests, << parameters.test-name >>]
            steps:
                - save_cache:
                      name: "Save cairo-lang Cache"
                      key: cairo-lang-cache-{{ arch }}-v1-{{ checksum "/tmp/cairo-lang-version" }}
                      paths:
                          - /usr/python3.8/dist-packages/cairo-lang
                          - /usr/python3.9/dist-packages/cairo-lang
                          - /usr/local/bin/starknet
                          - /usr/local/bin/starknet-compile

    - &restore_devnet_cache
      - restore_cache:
            name: "Restore devnet Cache"
            key: devnet-cache-{{ arch }}-v1-{{ checksum "/tmp/devnet-version" }}
    - &save_devnet_cache
      - save_cache:
            name: "Save devnet Cache"
            key: devnet-cache-{{ arch }}-v1-{{ checksum "/tmp/devnet-version" }}
            paths:
                - /opt/circleci/.pyenv/versions
                - /opt/circleci/.pyenv/shims/starknet-devnet
                - /usr/local/bin/starknet-devnet
                - /usr/local/lib/python3.8/site-packages
                - /usr/local/lib/python3.9/site-packages

######################################################################################################################################################################
# Commands
#
#   fetch_dependecies_version - retrieves the latest version of the dependencies (starknet-devnet and cairo-lang).
#                               These are saved to different files, from which we verify the checksum to check for any needed updates, and create caches with new keys
#
#   restore_dependency_cache - download dependencies from cache. It calls the `restore_*` aliases defined above for each dependecy.
#
#   save_dependency_cache - save the dependencies in cache. It calls the `save_*` aliases defined above for each dependecy.
#
######################################################################################################################################################################
commands:
    fetch_dependecies_version:
        description: "Fetch the dependencies version"
        steps:
            - run:
                  name: "Load config enviroment variables at runtime"
                  command: |
                      for key in $(jq -r 'keys[]' config.json); do
                          echo $key=$(jq -r .[\""$key"\"] config.json) >> $BASH_ENV
                      done
            - run:
                  name: "Fetch Devnet version"
                  command: echo "$STARKNET_DEVNET" > /tmp/devnet-version
            - run:
                  name: "Set cairo-lang version"
                  command: echo "$CAIRO_LANG"> /tmp/cairo-lang-version
    restore_dependency_cache:
        parameters:
            platform:
                type: string
            test-name:
                type: string
        description: "Restore the dependencies from cache"
        steps:
            - <<: *restore_macos_brew_cache
            - <<: *restore_cairo_cache
            - <<: *restore_venv_cache
            - <<: *restore_devnet_cache
    save_dependency_cache:
        parameters:
            platform:
                type: string
            test-name:
                type: string
        description: "Save the dependencies to cache"
        steps:
            - <<: *save_macos_brew_cache
            - <<: *save_cairo_cache
            - <<: *save_venv_cache
            - <<: *save_devnet_cache

###################
# Jobs definition #
###################
jobs:
    test:
        parameters:
            platform:
                type: string
            test-name:
                type: string
        executor: << parameters.platform >>
        steps:
            - checkout

            ############################################################################################################################################################
            # If on a Linux executor, add permissions for user to be able to write to "/usr/local/bin", so that we're able to download cache that will be in that folder
            ############################################################################################################################################################
            - when:
                  condition:
                      and:
                          - equal: [linux-node14, << parameters.platform >>]
                  steps:
                      - run:
                            name: Add file permissions
                            command: sudo chown -R circleci /usr/local/bin

            ##################################################
            # Retrieve the latest versions of the dependencies
            ##################################################
            - fetch_dependecies_version

            #############################################################################################################################################################################
            # Call Command: restore_dependency_cache - restore the dependencies that were saved in cache. The parameters are passed because some caches depend on the executor and test #
            #############################################################################################################################################################################
            - restore_dependency_cache:
                  platform: << parameters.platform >>
                  test-name: << parameters.test-name >>

            - run:
                  name: Install
                  command: npm install
            - run:
                  name: Lint
                  command: npm run lint
            - run:
                  name: Build
                  command: npm run build
            - run:
                  name: << parameters.test-name >>
                  command: npm run << parameters.test-name >>
                  no_output_timeout: 15m

            #################################################################################################################################################################################
            # Call Command: save_dependency_cache - save dependencies that were installed during the job run. The parameters are passed because some caches depend on the executor and test #
            #################################################################################################################################################################################
            - save_dependency_cache:
                  platform: << parameters.platform >>
                  test-name: << parameters.test-name >>
    npm_publish:
        executor: linux-node14
        steps:
            - checkout
            - run:
                  name: Publish
                  command: ./scripts/npm-publish.sh

workflows:
    test_and_publish:
        jobs:
            - test:
                  matrix:
                      parameters:
                          platform: [linux-node14, macos-node14]
                          test-name:
                              [
                                  test-general-tests,
                                  test-configuration-tests,
                                  test-venv-tests,
                                  test-integrated-devnet-tests,
                                  test-recompilation-tests
                              ]
                      exclude:
                          - platform: macos-node14
                            test-name: test-general-tests
                          - platform: macos-node14
                            test-name: test-configuration-tests
                          - platform: macos-node14
                            test-name: test-integrated-devnet-tests
                          - platform: macos-node14
                            test-name: test-recompilation-tests
                  context: shardlabs
            - npm_publish:
                  context: shardlabs
                  filters:
                      branches:
                          only:
                              - master
                  requires:
                      - test
